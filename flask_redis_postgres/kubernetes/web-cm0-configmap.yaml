apiVersion: v1
data:
  Dockerfile: |+
    FROM python:3.11-slim

    WORKDIR /app

    COPY requirements.txt .
    RUN pip install --no-cache-dir -r requirements.txt

    COPY . .

    # Set environment variables for Flask
    ENV FLASK_APP=app.py
    ENV FLASK_RUN_HOST=0.0.0.0

    # Run Flask
    CMD ["flask", "run"]

  app.py: |-
    import time
    import os
    import redis
    import psycopg2
    from flask import Flask, jsonify, request
    from celery_worker import process_data

    app = Flask(__name__)
    cache = redis.Redis(host=os.environ.get('REDIS_HOST', 'redis'), port=6379)

    def get_db_connection():
        conn = psycopg2.connect(
            host=os.environ.get('POSTGRES_HOST', 'db'),
            database=os.environ.get('POSTGRES_DB', 'mydb'),
            user=os.environ.get('POSTGRES_USER', 'myuser'),
            password=os.environ.get('POSTGRES_PASSWORD', 'mypassword')
        )
        return conn

    @app.route("/")
    def index():
        return "Hello, Flask app is running!"

    @app.route("/redis")
    def test_redis():
        start = time.time()
        cache.set("test_key", "Hello from Redis!")
        value = cache.get("test_key")
        elapsed = time.time() - start
        return jsonify({
            "source": "redis",
            "value": value.decode("utf-8"),
            "elapsed_seconds": elapsed
        })

    @app.route("/postgres")
    def test_postgres():
        start = time.time()
        conn = get_db_connection()
        cur = conn.cursor()
        cur.execute("SELECT value FROM kvstore WHERE key = %s", ("test_key",))
        row = cur.fetchone()
        cur.close()
        conn.close()
        value = row[0] if row else None
        elapsed = time.time() - start
        return jsonify({
            "source": "postgres",
            "value": value,
            "elapsed_seconds": elapsed
        })

    @app.route("/process", methods=["POST"])
    def process():
        req_json = request.get_json()
        data = req_json.get("data")
        task = process_data.delay(data)
        return jsonify({"task_id": task.id}), 202

    if __name__ == "__main__":
        app.run(host="0.0.0.0", port=5000)
  celery_worker.py: |-
    import os
    from celery import Celery

    celery = Celery(
        "worker",
        broker=os.environ.get("CELERY_BROKER_URL", "amqp://guest:guest@rabbitmq//"),
        backend=os.environ.get("CELERY_RESULT_BACKEND", "redis://redis:6379/0")
    )

    @celery.task
    def process_data(data):
        import time
        time.sleep(2)
        result = f"Processed: {data}"
        print(result)
        return result
  requirements.txt: |-
    Flask
    redis
    psycopg2-binary
    celery
kind: ConfigMap
metadata:
  labels:
    io.kompose.service: web
  name: web-cm0
